#!/usr/bin/env bash

set -eo pipefail

env_dir=$1/env
cache_dir=$2
launch_dir=$3

# TODO: pull version from package.json
nodejs_url=https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz
nodejs=$(basename "${nodejs_url%.tar.xz}")

# TODO: to add support for vendored apps:
# - delete node_modules layer in cache
# - delete node_modules.toml in launch
# - rebuild node_modules in app dir
# - don't set NODE_PATH
if [[ -e node_modules ]]; then
    >&2 echo "Vendored apps not supported."
    exit 1
fi

# Load user-provided build-time environment variables
if compgen -G "$env_dir/*" > /dev/null; then
    for var in "$env_dir"/*; do
        declare "$(basename "$var")=$(<"$var")"
    done
fi

# If it doesn't exist locally, create a Node.js cache layer with
# POSIX-style root for build (bin, lib, include, etc).
# This makes Node.js available to subsequent buildpacks as well.
if [[ ! -d $cache_dir/$nodejs ]]; then
    wget -q -O - "$nodejs_url" | tar -xJf - -C "$cache_dir"
    mkdir -p "$cache_dir/$nodejs/env"
    echo "$cache_dir/node_modules" > "$cache_dir/$nodejs/env/NODE_PATH"
fi

# If it doesn't exist remotely, create a Node.js launch layer with
# POSIX-style root for launch (bin, lib, etc).
if [[ ! -f $launch_dir/$nodejs.toml ]]; then
    mkdir "$launch_dir/$nodejs"
    cp -r "$cache_dir/$nodejs"/{bin,lib} "$launch_dir/$nodejs/"
fi

# Make npm, node, etc. accessible in this script
export PATH=$PATH:$cache_dir/$nodejs/bin
if [[ -z $LD_LIBRARY_PATH ]]; then
    export LD_LIBRARY_PATH=$cache_dir/$nodejs/lib
else
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$cache_dir/$nodejs/lib
fi

# TODO: (saves ~3s) generate ./package-lock.json if necessary and
# TODO: compare to copy in cache and checksum in node_modules.toml

# Update cached node modules
if [[ -d $cache_dir/node_modules ]]; then
    ln -sf "$cache_dir/node_modules" node_modules
    npm rebuild "--nodedir=$cache_dir/$nodejs"
fi
npm install --unsafe-perm --userconfig .npmrc --cache "$cache_dir/npm-cache"
mkdir -p node_modules
if [[ ! -d $cache_dir/node_modules ]]; then
    mv node_modules "$cache_dir/"
    ln -sf "$cache_dir/node_modules" node_modules
fi

# Update remote node modules layer if necessary
local_checksum=$(md5sum package-lock.json | cut -d' ' -f1)
if [[ -f $launch_dir/node_modules.toml ]]; then
    remote_checksum=$(cat "$launch_dir/node_modules.toml" | yj -t | jq -r .lock_checksum)
fi
if [[ $local_checksum != $remote_checksum ]] ; then
    cp -r "$cache_dir/node_modules" "$launch_dir/"
    echo "lock_checksum = \"$local_checksum\"" > "$launch_dir/node_modules.toml"
fi

# Set default start command
echo 'processes = [{ type = "web", command = "npm start"}]' > "$launch_dir/launch.toml"