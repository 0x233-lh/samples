#!/usr/bin/env bash

set -eo pipefail

env_dir=$1/env
cache_dir=$2
launch_dir=$3

# TODO: pull version from package.json
node_version=v8.11.3
nodejs_url=https://nodejs.org/dist/${node_version}/node-${node_version}-linux-x64.tar.xz

# TODO: to add support for vendored apps:
# - delete node_modules layer in cache
# - delete node_modules.toml in launch
# - rebuild node_modules in app dir
# - don't set NODE_PATH
if [[ -e node_modules ]]; then
    >&2 echo "Vendored apps not supported."
    exit 1
fi

# Load user-provided build-time environment variables
if compgen -G "$env_dir/*" > /dev/null; then
    for var in "$env_dir"/*; do
        declare "$(basename "$var")=$(<"$var")"
    done
fi

# If it doesn't exist locally, create a Node.js cache layer with
# POSIX-style root for build (bin, lib, include, etc).
# This makes Node.js available to subsequent buildpacks as well.
if [[ -f $cache_dir/nodejs.toml ]]; then
    cached_nodejs_version=$(cat "$cache_dir/nodejs.toml" | yj -t | jq -r .version)
fi
if [[ $node_version != $cached_nodejs_version ]] ; then
    echo "Providing nodejs for later buildpacks - $node_version"
    rm -rf "$cache_dir/nodejs"
    mkdir "$cache_dir/nodejs"
    wget -q -O - "$nodejs_url" | tar -xJf - -C "$cache_dir/nodejs" --strip-components=1
    mkdir -p "$cache_dir/nodejs/env"
    echo "$cache_dir/node_modules" > "$cache_dir/nodejs/env/NODE_PATH"
    echo "version = \"$node_version\"" > "$cache_dir/nodejs.toml"
else
    echo "Using cached nodejs for later buildpacks - $node_version"
fi

# If it doesn't exist remotely, create a Node.js launch layer with
# POSIX-style root for launch (bin, lib, etc).
if [[ -f $launch_dir/nodejs.toml ]]; then
    launch_nodejs_version=$(cat "$launch_dir/nodejs.toml" | yj -t | jq -r .version)
fi
if [[ $node_version != $launch_nodejs_version ]] ; then
    echo "Providing nodejs for runtime - $node_version"
    mkdir "$launch_dir/nodejs"
    cp -r "$cache_dir/nodejs"/{bin,lib} "$launch_dir/nodejs/"
    cp "$cache_dir/nodejs.toml" "$launch_dir/nodejs.toml"
else
    echo "Using cached nodejs layer for runtime - $node_version"
fi

# Make npm, node, etc. accessible in this script
export PATH=$PATH:$cache_dir/nodejs/bin
if [[ -z $LD_LIBRARY_PATH ]]; then
    export LD_LIBRARY_PATH=$cache_dir/nodejs/lib
else
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$cache_dir/nodejs/lib
fi

# TODO: (saves ~3s) generate ./package-lock.json if necessary and
# TODO: compare to copy in cache and checksum in node_modules.toml

# Update cached node modules
if [[ -d $cache_dir/node_modules ]]; then
    echo "Rebuilding node modules (from cache)"
    ln -snf "$cache_dir/node_modules" node_modules
    npm rebuild "--nodedir=$cache_dir/nodejs"
else
    mkdir "$cache_dir/node_modules"
    ln -snf "$cache_dir/node_modules" node_modules
fi
echo "Installing node modules"
npm install --unsafe-perm --userconfig .npmrc --cache "$cache_dir/npm-cache"

ln -snf "$launch_dir/node_modules" node_modules

# Update remote node modules layer if necessary
local_checksum=$(md5sum package-lock.json | cut -d' ' -f1)
if [[ -f $launch_dir/node_modules.toml ]]; then
    remote_checksum=$(cat "$launch_dir/node_modules.toml" | yj -t | jq -r .lock_checksum)
fi
if [[ $local_checksum != $remote_checksum ]] ; then
    cp -r "$cache_dir/node_modules" "$launch_dir/"
    echo "lock_checksum = \"$local_checksum\"" > "$launch_dir/node_modules.toml"
else
    echo "Using cached node modules layer for runtime"
fi

# Set default start command
echo 'processes = [{ type = "web", command = "npm start"}]' > "$launch_dir/launch.toml"
